// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdentitySDK
import CFNetwork
import Foundation
@_exported import IdentitySDK
import PDFKit
import Swift
import UIKit
public enum IdentityError : Swift.Error, Swift.Equatable {
  case internalError(url: Foundation.URL, code: Swift.Int)
  case requestError(url: Foundation.URL, code: Swift.Int, message: Swift.String = "")
  case videoIDError(code: Swift.String, message: Swift.String)
  public static func == (lhs: IdentitySDK.IdentityError, rhs: IdentitySDK.IdentityError) -> Swift.Bool
}
public enum SignatureError : Swift.Error, Swift.Equatable {
  case userCancelledProcess
  case internalError(url: Foundation.URL, code: Swift.Int)
  case requestError(url: Foundation.URL, code: Swift.Int, message: Swift.String)
  public static func == (lhs: IdentitySDK.SignatureError, rhs: IdentitySDK.SignatureError) -> Swift.Bool
}
extension SignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SignatureManager {
  public func startSignature(forProceedToken token: Swift.String, hostViewController: UIKit.UIViewController, completionHandler: @escaping (IdentitySDK.SignatureError?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AuthorizationManager {
  public func startAuthorization(forProceedToken token: Swift.String, languageCode: Swift.String, hostViewController: UIKit.UIViewController, completionHandler: @escaping (IdentitySDK.IdentityError?) -> Swift.Void)
  @objc deinit
}
public class Identity {
  public var signatureManager: IdentitySDK.SignatureManager {
    get
    set
  }
  public var authorizationManager: IdentitySDK.AuthorizationManager {
    get
    set
  }
  public init()
  public var frameworkVersion: Swift.String {
    get
  }
  @objc deinit
}

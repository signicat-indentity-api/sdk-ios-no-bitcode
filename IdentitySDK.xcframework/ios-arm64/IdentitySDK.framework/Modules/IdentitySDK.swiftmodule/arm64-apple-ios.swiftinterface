// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdentitySDK
import AuthenticationServices
import CFNetwork
import Foundation
@_exported import IdentitySDK
import PDFKit
import Swift
import UIKit
public enum VideoIDError : Swift.Error, Swift.Equatable {
  case cancelled
  case internalError(code: Swift.String, message: Swift.String)
  case serverError(code: Swift.String, message: Swift.String)
  case networkError(code: Swift.String, message: Swift.String)
  public static func == (lhs: IdentitySDK.VideoIDError, rhs: IdentitySDK.VideoIDError) -> Swift.Bool
}
public enum SignatureError : Swift.Error, Swift.Equatable {
  case cancelled
  case internalError(code: Swift.String, message: Swift.String)
  case networkError(code: Swift.String, message: Swift.String)
  case serverError(code: Swift.String, message: Swift.String)
  public static func == (lhs: IdentitySDK.SignatureError, rhs: IdentitySDK.SignatureError) -> Swift.Bool
}
extension SignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
public var STYLE: IdentitySDK.Style
public class Identity {
  public var signatureManager: IdentitySDK.SignatureManager {
    get
    set
  }
  public var authorizationManager: IdentitySDK.AuthorizationManager {
    get
    set
  }
  public var micropaymentManager: IdentitySDK.MicropaymentManager {
    get
    set
  }
  public init()
  public var frameworkVersion: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SignatureManager {
  public func startSignature(forProceedToken token: Swift.String, hostViewController: UIKit.UIViewController, completionHandler: @escaping (IdentitySDK.SignatureError?) -> Swift.Void)
  @objc deinit
}
public struct Style {
  public var brandLogo: UIKit.UIImage
  public var backgroundColor: UIKit.UIColor
  public var buttonCornerRadius: CoreGraphics.CGFloat
  public var applyButtonBackgroundColor: UIKit.UIColor
  public var cancelButtonBackgroundColor: UIKit.UIColor
  public var boldFontName: Swift.String?
  public var buttonLabelTextSize: CoreGraphics.CGFloat
  public var regularFontName: Swift.String?
  public var videoID: IdentitySDK.VideoIDStyle
}
public struct VideoIDStyle {
  public var textColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var activityIndicatorColor: UIKit.UIColor
}
public let identitySDKErrorMicropaymentCanceledByUser: Swift.String
public let identitySDKErrorMicropayment: Swift.String
public enum MicropaymentError {
  case cancelled
  case internalError(code: Swift.String, message: Swift.String)
  case serverError(code: Swift.String, message: Swift.String)
  case networkError(code: Swift.String, message: Swift.String)
}
@_hasMissingDesignatedInitializers public class AuthorizationManager {
  public func startAuthorization(forProceedToken token: Swift.String, languageCode: Swift.String, hostViewController: UIKit.UIViewController, completionHandler: @escaping (IdentitySDK.VideoIDError?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MicropaymentManager {
  public func startMicropayment(forProceedToken token: Swift.String, hostViewController: UIKit.UIViewController, completionHandler: @escaping (IdentitySDK.MicropaymentError?) -> Swift.Void)
  @objc deinit
}
